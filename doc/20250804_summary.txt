# 2025년 8월 4일 RAG PoC 시스템 개발 및 디버깅 요약

## 1. 초기 RAG PoC 시스템 구축
- `20250803_rag_poc.md` 문서에 기반하여 RAG(검색 증강 생성) PoC 시스템의 기본 구성 요소(데이터 수집/전처리, 임베딩, 벡터 DB 구축, 경량 LLM 통합)를 구현했습니다.
- `chunks` 디렉토리 생성 및 예시 문서(`시스템개요.txt`, `DB_버전정보.txt`)를 추가했습니다.
- `embedding.py`, `vector_db.py`, `rag_poc.py` 스크립트를 생성했습니다.

## 2. 기능 확장 및 상호작용 구현
- 새로운 문서(`모의해킹.txt`)를 `chunks` 디렉토리에 추가하여 시스템에 반영했습니다.
- `rag_poc.py`를 수정하여 사용자가 직접 질문을 입력하고 답변을 받을 수 있는 대화형 인터페이스를 구현했습니다.

## 3. 주요 기술 스택 및 구성
- **임베딩 모델**: `sentence-transformers` 라이브러리를 활용한 `jhgan/ko-sroberta-multitask` 모델을 사용하여 문서 조각을 벡터로 변환했습니다.
- **벡터 데이터베이스**: `ChromaDB`를 사용하여 임베딩된 문서 벡터를 저장하고 관리했습니다.
- **대규모 언어 모델 (LLM)**:
    - 초기에는 `EleutherAI/polyglot-ko-1.3b` 모델을 사용했으나, 지시사항 추종 능력의 한계로 인해 `beomi/KoAlpaca-Polyglot-5.8B` 모델로 교체했습니다.
    - `8비트 양자화(Quantization)` 기법을 적용하여 GPU 메모리 사용량을 최적화했습니다.
    - `NVIDIA CUDA`를 활용하여 GPU에서 모델을 실행하도록 구성했습니다.

## 4. 주요 디버깅 및 개선 과정
- **데이터베이스 영속성 문제 해결**: `chromadb.Client()` 대신 `chromadb.PersistentClient()`를 사용하여 벡터 DB가 스크립트 종료 후에도 유지되도록 수정했습니다.
- **스크립트 실행 위치 문제 해결**: `rag_poc` 디렉토리 내에서 스크립트를 실행하도록 안내하여 올바른 DB 경로를 참조하게 했습니다.
- **데이터베이스 오염(중복 데이터) 문제 해결**: `vector_db.py`에 기존 컬렉션을 삭제 후 재생성하는 로직을 추가하여 DB의 무결성을 확보했습니다.
- **LLM 답변 품질 문제 해결**: 
    - 초기 LLM의 프롬프트 반복 및 의미 없는 답변 생성 문제를 해결하기 위해 `pipeline`의 `return_full_text=False` 옵션을 적용했습니다.
    - LLM이 프롬프트 구조를 오해하는 문제를 해결하기 위해 `###` 마크다운 헤더를 사용한 명확한 프롬프트 구조를 적용했습니다.
    - LLM의 랜덤성을 줄이기 위해 `temperature=0.1`, `max_new_tokens=64` 옵션을 설정했습니다.
    - LLM이 불필요한 정보에 혼란을 겪는 문제를 해결하기 위해 검색 결과(`n_results`)를 3개에서 1개로 다시 줄여 가장 관련성 높은 문서에 집중하도록 했습니다.
    - 데이터 품질 개선을 위해 `모의해킹.txt`의 내용을 LLM이 이해하기 쉬운 서술형 문장으로 수정했습니다.
    - `CUDA out of memory` 오류 해결을 위해 `bitsandbytes` 및 `accelerate` 라이브러리를 활용한 8비트 양자화를 적용하고, `pipeline` 생성 시 `device` 인수를 제거했습니다.

## 5. 문서화 및 기록
- `20250803_rag_poc.md` 파일의 모든 Todo 항목을 완료(`[x]`) 상태로 업데이트했습니다.
- `D:\workspace\rag_poc\doc\debugging.md` 파일을 생성하여 디버깅 과정에서 발견된 문제의 원인과 해결책을 상세히 정리했습니다.
- `D:\workspace\rag_poc\doc\20250804_dialog_with_gemini.txt` 파일을 생성하여 현재 대화 기록을 저장할 수 있도록 준비했습니다.

## 6. 최종 결과
- RAG PoC 시스템은 이제 사용자의 질문에 대해 관련 문서를 정확히 검색하고, 해당 문서의 내용을 바탕으로 핵심 정보를 포함한 답변을 생성할 수 있습니다. 경량 LLM의 특성상 답변의 간결성에는 한계가 있으나, PoC의 목표인 핵심 기술 검증은 성공적으로 완료되었습니다.
